{"ast":null,"code":"var _jsxFileName = \"E:\\\\.3 DBMS\\\\Project\\\\Project working copy\\\\src\\\\components\\\\noticeboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./noticeboard.css\";\n\n// const Noticeboard = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [newPostContent, setNewPostContent] = useState(\"\");\n//   const [userId, setUserId] = useState(\"user123\"); // Example user ID, replace with actual\n\n//   useEffect(() => {\n//     // Fetch posts from the server (replace with actual API endpoint)\n//     fetch(\"/posts\")\n//       .then((response) => response.json())\n//       .then((data) => setPosts(data));\n//   }, []);\n\n//   const handleLike = (postId) => {\n//     fetch(`/posts/${postId}/like`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ userId }),\n//     }).then(() => {\n//       setPosts(posts.map((post) => (post._id === postId ? { ...post, liked: true } : post)));\n//     });\n//   };\n\n//   const handleComment = (postId, comment) => {\n//     fetch(`/posts/${postId}/comment`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ userId, comment }),\n//     }).then(() => {\n//       setPosts(posts.map((post) => (post._id === postId ? { ...post, comments: [...post.comments, { userId, comment }] } : post)));\n//     });\n//   };\n\n//   const handleNewPost = () => {\n//     const newPost = {\n//       content: newPostContent,\n//       likes: [],\n//       comments: [],\n//     };\n\n//     // Post new content to server (replace with actual API endpoint)\n//     fetch(\"/posts\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(newPost),\n//     }).then(() => {\n//       setPosts([newPost, ...posts]); // Add new post to the front\n//       setNewPostContent(\"\"); // Clear the content field\n//     });\n//   };\n\n//   return (\n//     <div className=\"noticeboard-container\">\n//       <div className=\"new-post-block\">\n//         <textarea\n//           placeholder=\"Write something new...\"\n//           value={newPostContent}\n//           onChange={(e) => setNewPostContent(e.target.value)}\n//         ></textarea>\n//         <button onClick={handleNewPost}>Post</button>\n//       </div>\n\n//       <div className=\"posts-list\">\n//         {posts.map((post) => (\n//           <div key={post._id} className=\"post-block\">\n//             <div className=\"post-content\">\n//               <p>{post.content}</p>\n//             </div>\n\n//             <div className=\"post-actions\">\n//               <button className=\"like-btn\" onClick={() => handleLike(post._id)}>\n//                 Like\n//               </button>\n//               <span className=\"like-count\">{post.likes.length} Likes</span>\n//             </div>\n\n//             <div className=\"comments-section\">\n//               <div className=\"comments-list\">\n//                 {post.comments.map((comment, idx) => (\n//                   <div key={idx} className=\"comment-item\">\n//                     <strong>{comment.userId}:</strong> {comment.comment}\n//                   </div>\n//                 ))}\n//               </div>\n\n//               <textarea\n//                 placeholder=\"Add a comment\"\n//                 onBlur={(e) => handleComment(post._id, e.target.value)}\n//                 className=\"comment-input\"\n//               />\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Noticeboard;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./noticeboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Noticeboard = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [newPostContent, setNewPostContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"user123\"); // Example user ID, replace with actual\n\n  useEffect(() => {\n    // Fetch posts from the server (replace with actual API endpoint)\n    fetch(\"/posts\").then(response => response.json()).then(data => setPosts(data));\n  }, []);\n  const handleLike = postId => {\n    fetch(`/posts/${postId}/like`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId\n      })\n    }).then(() => {\n      setPosts(posts.map(post => post._id === postId ? {\n        ...post,\n        liked: true\n      } : post));\n    });\n  };\n  const handleComment = (postId, comment) => {\n    fetch(`/posts/${postId}/comment`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId,\n        comment\n      })\n    }).then(() => {\n      setPosts(posts.map(post => post._id === postId ? {\n        ...post,\n        comments: [...post.comments, {\n          userId,\n          comment\n        }]\n      } : post));\n    });\n  };\n  const handleNewPost = () => {\n    const newPost = {\n      content: newPostContent,\n      likes: [],\n      comments: []\n    };\n\n    // Post new content to server (replace with actual API endpoint)\n    fetch(\"/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newPost)\n    }).then(() => {\n      setPosts([newPost, ...posts]); // Add new post to the front\n      setNewPostContent(\"\"); // Clear the content field\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"noticeboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-post-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write something new...\",\n        value: newPostContent,\n        onChange: e => setNewPostContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewPost,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-list\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-avatar\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.avatar,\n              alt: \"Avatar\",\n              className: \"post-avatar-img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-name\",\n              children: post.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-date\",\n              children: post.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"share-btn\",\n            children: \"Share\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"post-title\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"post-description\",\n            children: post.shortDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"like-comment-count\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [post.likes.length, \" Likes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [post.comments.length, \" Comments\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"like-btn\",\n              onClick: () => handleLike(post._id),\n              children: \"Like\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                placeholder: \"Add a comment\",\n                onBlur: e => handleComment(post._id, e.target.value),\n                className: \"comment-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"comment-btn\",\n                children: \"\\u27A4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(Noticeboard, \"mz4Uwv+nExga5iGOm9t18Vm5rJ0=\");\n_c = Noticeboard;\nexport default Noticeboard;\nvar _c;\n$RefreshReg$(_c, \"Noticeboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Noticeboard","_s","posts","setPosts","newPostContent","setNewPostContent","userId","setUserId","fetch","then","response","json","data","handleLike","postId","method","headers","body","JSON","stringify","map","post","_id","liked","handleComment","comment","comments","handleNewPost","newPost","content","likes","className","children","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","avatar","alt","author","date","title","shortDescription","length","onBlur","_c","$RefreshReg$"],"sources":["E:/.3 DBMS/Project/Project working copy/src/components/noticeboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./noticeboard.css\";\r\n\r\n// const Noticeboard = () => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [newPostContent, setNewPostContent] = useState(\"\");\r\n//   const [userId, setUserId] = useState(\"user123\"); // Example user ID, replace with actual\r\n\r\n//   useEffect(() => {\r\n//     // Fetch posts from the server (replace with actual API endpoint)\r\n//     fetch(\"/posts\")\r\n//       .then((response) => response.json())\r\n//       .then((data) => setPosts(data));\r\n//   }, []);\r\n\r\n//   const handleLike = (postId) => {\r\n//     fetch(`/posts/${postId}/like`, {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify({ userId }),\r\n//     }).then(() => {\r\n//       setPosts(posts.map((post) => (post._id === postId ? { ...post, liked: true } : post)));\r\n//     });\r\n//   };\r\n\r\n//   const handleComment = (postId, comment) => {\r\n//     fetch(`/posts/${postId}/comment`, {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify({ userId, comment }),\r\n//     }).then(() => {\r\n//       setPosts(posts.map((post) => (post._id === postId ? { ...post, comments: [...post.comments, { userId, comment }] } : post)));\r\n//     });\r\n//   };\r\n\r\n//   const handleNewPost = () => {\r\n//     const newPost = {\r\n//       content: newPostContent,\r\n//       likes: [],\r\n//       comments: [],\r\n//     };\r\n\r\n//     // Post new content to server (replace with actual API endpoint)\r\n//     fetch(\"/posts\", {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify(newPost),\r\n//     }).then(() => {\r\n//       setPosts([newPost, ...posts]); // Add new post to the front\r\n//       setNewPostContent(\"\"); // Clear the content field\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"noticeboard-container\">\r\n//       <div className=\"new-post-block\">\r\n//         <textarea\r\n//           placeholder=\"Write something new...\"\r\n//           value={newPostContent}\r\n//           onChange={(e) => setNewPostContent(e.target.value)}\r\n//         ></textarea>\r\n//         <button onClick={handleNewPost}>Post</button>\r\n//       </div>\r\n\r\n//       <div className=\"posts-list\">\r\n//         {posts.map((post) => (\r\n//           <div key={post._id} className=\"post-block\">\r\n//             <div className=\"post-content\">\r\n//               <p>{post.content}</p>\r\n//             </div>\r\n\r\n//             <div className=\"post-actions\">\r\n//               <button className=\"like-btn\" onClick={() => handleLike(post._id)}>\r\n//                 Like\r\n//               </button>\r\n//               <span className=\"like-count\">{post.likes.length} Likes</span>\r\n//             </div>\r\n\r\n//             <div className=\"comments-section\">\r\n//               <div className=\"comments-list\">\r\n//                 {post.comments.map((comment, idx) => (\r\n//                   <div key={idx} className=\"comment-item\">\r\n//                     <strong>{comment.userId}:</strong> {comment.comment}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n\r\n//               <textarea\r\n//                 placeholder=\"Add a comment\"\r\n//                 onBlur={(e) => handleComment(post._id, e.target.value)}\r\n//                 className=\"comment-input\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Noticeboard;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./noticeboard.css\";\r\n\r\nconst Noticeboard = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [newPostContent, setNewPostContent] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"user123\"); // Example user ID, replace with actual\r\n\r\n  useEffect(() => {\r\n    // Fetch posts from the server (replace with actual API endpoint)\r\n    fetch(\"/posts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setPosts(data));\r\n  }, []);\r\n\r\n  const handleLike = (postId) => {\r\n    fetch(`/posts/${postId}/like`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ userId }),\r\n    }).then(() => {\r\n      setPosts(posts.map((post) => (post._id === postId ? { ...post, liked: true } : post)));\r\n    });\r\n  };\r\n\r\n  const handleComment = (postId, comment) => {\r\n    fetch(`/posts/${postId}/comment`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ userId, comment }),\r\n    }).then(() => {\r\n      setPosts(posts.map((post) => (post._id === postId ? { ...post, comments: [...post.comments, { userId, comment }] } : post)));\r\n    });\r\n  };\r\n\r\n  const handleNewPost = () => {\r\n    const newPost = {\r\n      content: newPostContent,\r\n      likes: [],\r\n      comments: [],\r\n    };\r\n\r\n    // Post new content to server (replace with actual API endpoint)\r\n    fetch(\"/posts\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(newPost),\r\n    }).then(() => {\r\n      setPosts([newPost, ...posts]); // Add new post to the front\r\n      setNewPostContent(\"\"); // Clear the content field\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"noticeboard-container\">\r\n      <div className=\"new-post-block\">\r\n        <textarea\r\n          placeholder=\"Write something new...\"\r\n          value={newPostContent}\r\n          onChange={(e) => setNewPostContent(e.target.value)}\r\n        ></textarea>\r\n        <button onClick={handleNewPost}>Post</button>\r\n      </div>\r\n\r\n      <div className=\"posts-list\">\r\n        {posts.map((post) => (\r\n          <div key={post._id} className=\"post-block\">\r\n            <div className=\"post-header\">\r\n              <div className=\"post-avatar\">\r\n                <img src={post.avatar} alt=\"Avatar\" className=\"post-avatar-img\" />\r\n              </div>\r\n              <div className=\"post-info\">\r\n                <div className=\"post-name\">{post.author}</div>\r\n                <div className=\"post-date\">{post.date}</div>\r\n              </div>\r\n              <button className=\"share-btn\">Share</button>\r\n            </div>\r\n\r\n            <div className=\"post-body\">\r\n              <h3 className=\"post-title\">{post.title}</h3>\r\n              <p className=\"post-description\">{post.shortDescription}</p>\r\n            </div>\r\n\r\n            <div className=\"post-footer\">\r\n              <div className=\"like-comment-count\">\r\n                <span>{post.likes.length} Likes</span>\r\n                <span>{post.comments.length} Comments</span>\r\n              </div>\r\n              <div className=\"post-actions\">\r\n                <button className=\"like-btn\" onClick={() => handleLike(post._id)}>\r\n                  Like\r\n                </button>\r\n                <div className=\"comment-section\">\r\n                  <textarea\r\n                    placeholder=\"Add a comment\"\r\n                    onBlur={(e) => handleComment(post._id, e.target.value)}\r\n                    className=\"comment-input\"\r\n                  />\r\n                  <button className=\"comment-btn\">➤</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Noticeboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}