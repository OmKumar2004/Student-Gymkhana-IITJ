{"ast":null,"code":"var _jsxFileName = \"E:\\\\.3 DBMS\\\\Project\\\\Project working copy_Integration\\\\src\\\\components\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './Login.css';\n\n// const LoginPage = () => {\n//   const [form, setForm] = useState({\n//     field: '', // For either username or email\n//     pass: '',  // Changed password field to 'pass' to match backend\n//   });\n//   const [error, setError] = useState(null);\n\n//   const handleChange = (e) => {\n//     setForm({\n//       ...form,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(null); // Reset error message before submission\n\n//     try {\n//       // Use the actual backend URL here\n//       const response = await fetch('http://localhost:3300/apis/v1/user/login', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(form), // Send form directly, where 'pass' is the password field\n//       });\n\n//       // Handling based on status code\n//       if (response.status !== 200) {\n//         const errorData = await response.json();\n\n//         // Handle specific status codes\n//         switch (response.status) {\n//           case 400:\n//             throw new Error(errorData.message || 'Bad request. Please check the entered details.');\n//           case 401:\n//             throw new Error(errorData.message || 'Invalid username/email or password.');\n//           case 500:\n//             throw new Error('Internal server error. Please try again later.');\n//           default:\n//             throw new Error(errorData.message || 'Login failed. Please try again.');\n//         }\n//       }\n\n//       const data = await response.json();\n//       // Assuming the data contains a token or session details, store them for later use\n//       localStorage.setItem('token', data.token); // Example of storing the token for later use\n//       console.log('Login successful:', data);\n\n//       // Optionally, redirect or update UI on successful login\n//       window.location.href = './'; // Adjust as needed for your app structure\n//     } catch (error) {\n//       setError(error.message);\n//       console.error('Error during login:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h2>Login</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label>Username or Email</label>\n//           <input\n//             type=\"text\"\n//             name=\"field\" // Use the 'field' key to send either username or email\n//             value={form.field}\n//             onChange={handleChange}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group\">\n//           <label>Password</label>\n//           <input\n//             type=\"password\"\n//             name=\"pass\" // Changed 'password' to 'pass' for backend compatibility\n//             value={form.pass}\n//             onChange={handleChange}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"login-btn\">Login</button>\n//       </form>\n\n//       {error && <div className=\"error-message\">{error}</div>}\n\n//       <div className=\"google-login\">\n//         <button className=\"google-btn\">Login with Google</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For redirection after successful login\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [form, setForm] = useState({\n    field: '',\n    // For either username or email\n    pass: '' // Changed password field to 'pass' to match backend\n  });\n  const [error, setError] = useState(null);\n  const navigate = useNavigate(); // Hook for redirecting after successful login\n\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   setError(null); // Reset error message before submission\n\n  //   try {\n  //     const response = await fetch('http://localhost:3300/apis/v1/user/login', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       body: JSON.stringify(form), // Send form directly, where 'pass' is the password field\n  //     });\n\n  //     if (response.status !== 200) {\n  //       const errorData = await response.json();\n\n  //       // Handle specific status codes\n  //       switch (response.status) {\n  //         case 400:\n  //           throw new Error(errorData.message || 'Bad request. Please check the entered details.');\n  //         case 401:\n  //           throw new Error(errorData.message || 'Invalid username/email or password.');\n  //         case 500:\n  //           throw new Error('Internal server error. Please try again later.');\n  //         default:\n  //           throw new Error(errorData.message || 'Login failed. Please try again.');\n  //       }\n  //     }\n\n  //     const data = await response.json();\n  //     localStorage.setItem('token', data.token); // Store the token for later use\n\n  //     // Optionally, store the user data if needed\n  //     localStorage.setItem('user', JSON.stringify(data.user));\n\n  //     console.log('Login successful:', data);\n\n  //     // Redirect to home or dashboard after login\n  //     navigate('/'); // Adjust the path as needed for your app structure\n  //   } catch (error) {\n  //     setError(error.message);\n  //     console.error('Error during login:', error);\n  //   }\n  // };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3300/apis/v1/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(form)\n      });\n      if (response.status !== 200) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed. Please try again.');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token); // Store token in localStorage\n      localStorage.setItem('isLoggedIn', true); // Store login status in localStorage\n      localStorage.setItem('username', data.user.username);\n      window.location.href = '/'; // Redirect to the home page after login\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Username or Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"field\",\n          value: form.field,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"pass\",\n          value: form.pass,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"login-btn\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"google-login\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"google-btn\",\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"LTgmlIOFhhXIj7qM51bmofCOYaw=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginPage","_s","form","setForm","field","pass","error","setError","navigate","handleChange","e","target","name","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","status","errorData","json","Error","message","data","localStorage","setItem","token","user","username","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["E:/.3 DBMS/Project/Project working copy_Integration/src/components/LoginPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import './Login.css';\r\n\r\n// const LoginPage = () => {\r\n//   const [form, setForm] = useState({\r\n//     field: '', // For either username or email\r\n//     pass: '',  // Changed password field to 'pass' to match backend\r\n//   });\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const handleChange = (e) => {\r\n//     setForm({\r\n//       ...form,\r\n//       [e.target.name]: e.target.value,\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(null); // Reset error message before submission\r\n\r\n//     try {\r\n//       // Use the actual backend URL here\r\n//       const response = await fetch('http://localhost:3300/apis/v1/user/login', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(form), // Send form directly, where 'pass' is the password field\r\n//       });\r\n\r\n//       // Handling based on status code\r\n//       if (response.status !== 200) {\r\n//         const errorData = await response.json();\r\n\r\n//         // Handle specific status codes\r\n//         switch (response.status) {\r\n//           case 400:\r\n//             throw new Error(errorData.message || 'Bad request. Please check the entered details.');\r\n//           case 401:\r\n//             throw new Error(errorData.message || 'Invalid username/email or password.');\r\n//           case 500:\r\n//             throw new Error('Internal server error. Please try again later.');\r\n//           default:\r\n//             throw new Error(errorData.message || 'Login failed. Please try again.');\r\n//         }\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       // Assuming the data contains a token or session details, store them for later use\r\n//       localStorage.setItem('token', data.token); // Example of storing the token for later use\r\n//       console.log('Login successful:', data);\r\n\r\n//       // Optionally, redirect or update UI on successful login\r\n//       window.location.href = './'; // Adjust as needed for your app structure\r\n//     } catch (error) {\r\n//       setError(error.message);\r\n//       console.error('Error during login:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <h2>Login</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"form-group\">\r\n//           <label>Username or Email</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"field\" // Use the 'field' key to send either username or email\r\n//             value={form.field}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             name=\"pass\" // Changed 'password' to 'pass' for backend compatibility\r\n//             value={form.pass}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"login-btn\">Login</button>\r\n//       </form>\r\n\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n\r\n//       <div className=\"google-login\">\r\n//         <button className=\"google-btn\">Login with Google</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LoginPage;\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // For redirection after successful login\r\nimport './Login.css';\r\n\r\nconst LoginPage = () => {\r\n  const [form, setForm] = useState({\r\n    field: '', // For either username or email\r\n    pass: '',  // Changed password field to 'pass' to match backend\r\n  });\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate(); // Hook for redirecting after successful login\r\n\r\n  const handleChange = (e) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n  //   setError(null); // Reset error message before submission\r\n\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:3300/apis/v1/user/login', {\r\n  //       method: 'POST',\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //       },\r\n  //       body: JSON.stringify(form), // Send form directly, where 'pass' is the password field\r\n  //     });\r\n\r\n  //     if (response.status !== 200) {\r\n  //       const errorData = await response.json();\r\n\r\n  //       // Handle specific status codes\r\n  //       switch (response.status) {\r\n  //         case 400:\r\n  //           throw new Error(errorData.message || 'Bad request. Please check the entered details.');\r\n  //         case 401:\r\n  //           throw new Error(errorData.message || 'Invalid username/email or password.');\r\n  //         case 500:\r\n  //           throw new Error('Internal server error. Please try again later.');\r\n  //         default:\r\n  //           throw new Error(errorData.message || 'Login failed. Please try again.');\r\n  //       }\r\n  //     }\r\n\r\n  //     const data = await response.json();\r\n  //     localStorage.setItem('token', data.token); // Store the token for later use\r\n\r\n  //     // Optionally, store the user data if needed\r\n  //     localStorage.setItem('user', JSON.stringify(data.user));\r\n\r\n  //     console.log('Login successful:', data);\r\n\r\n  //     // Redirect to home or dashboard after login\r\n  //     navigate('/'); // Adjust the path as needed for your app structure\r\n  //   } catch (error) {\r\n  //     setError(error.message);\r\n  //     console.error('Error during login:', error);\r\n  //   }\r\n  // };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:3300/apis/v1/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(form),\r\n      });\r\n  \r\n      if (response.status !== 200) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Login failed. Please try again.');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token); // Store token in localStorage\r\n      localStorage.setItem('isLoggedIn', true);   // Store login status in localStorage\r\n      localStorage.setItem('username', data.user.username);\r\n      window.location.href = '/'; // Redirect to the home page after login\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Username or Email</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field\"\r\n            value={form.field}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"pass\"\r\n            value={form.pass}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"login-btn\">Login</button>\r\n      </form>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"google-login\">\r\n        <button className=\"google-btn\">Login with Google</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,KAAK,EAAE,EAAE;IAAE;IACXC,IAAI,EAAE,EAAE,CAAG;EACb,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMY,YAAY,GAAIC,CAAC,IAAK;IAC1BP,OAAO,CAAC;MACN,GAAGD,IAAI;MACP,CAACQ,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAC5B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}